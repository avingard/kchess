// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: chess.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializemove")
public inline fun move(block: MoveKt.Dsl.() -> kotlin.Unit): Move =
  MoveKt.Dsl._create(Move.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `Move`
 */
public object MoveKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: Move.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: Move.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): Move = _builder.build()

    /**
     * `.Position from = 1;`
     */
    public var from: Position
      @JvmName("getFrom")
      get() = _builder.getFrom()
      @JvmName("setFrom")
      set(value) {
        _builder.setFrom(value)
      }
    /**
     * `.Position from = 1;`
     */
    public fun clearFrom() {
      _builder.clearFrom()
    }
    /**
     * `.Position from = 1;`
     * @return Whether the from field is set.
     */
    public fun hasFrom(): kotlin.Boolean {
      return _builder.hasFrom()
    }

    /**
     * `.Position to = 2;`
     */
    public var to: Position
      @JvmName("getTo")
      get() = _builder.getTo()
      @JvmName("setTo")
      set(value) {
        _builder.setTo(value)
      }
    /**
     * `.Position to = 2;`
     */
    public fun clearTo() {
      _builder.clearTo()
    }
    /**
     * `.Position to = 2;`
     * @return Whether the to field is set.
     */
    public fun hasTo(): kotlin.Boolean {
      return _builder.hasTo()
    }

    /**
     * `.MoveEffect effect = 3;`
     */
    public var effect: MoveEffect
      @JvmName("getEffect")
      get() = _builder.getEffect()
      @JvmName("setEffect")
      set(value) {
        _builder.setEffect(value)
      }
    public var effectValue: kotlin.Int
      @JvmName("getEffectValue")
      get() = _builder.getEffectValue()
      @JvmName("setEffectValue")
      set(value) {
        _builder.setEffectValue(value)
      }
    /**
     * `.MoveEffect effect = 3;`
     */
    public fun clearEffect() {
      _builder.clearEffect()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun Move.copy(block: MoveKt.Dsl.() -> kotlin.Unit): Move =
  MoveKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val MoveOrBuilder.fromOrNull: Position?
  get() = if (hasFrom()) getFrom() else null

public val MoveOrBuilder.toOrNull: Position?
  get() = if (hasTo()) getTo() else null

