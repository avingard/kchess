// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: chess.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializegameEvent")
public inline fun gameEvent(block: GameEventKt.Dsl.() -> kotlin.Unit): GameEvent =
  GameEventKt.Dsl._create(GameEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `GameEvent`
 */
public object GameEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: GameEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: GameEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): GameEvent = _builder.build()

    /**
     * `.Move move = 1;`
     */
    public var move: Move
      @JvmName("getMove")
      get() = _builder.getMove()
      @JvmName("setMove")
      set(value) {
        _builder.setMove(value)
      }
    /**
     * `.Move move = 1;`
     */
    public fun clearMove() {
      _builder.clearMove()
    }
    /**
     * `.Move move = 1;`
     * @return Whether the move field is set.
     */
    public fun hasMove(): kotlin.Boolean {
      return _builder.hasMove()
    }

    /**
     * `.GameResult result = 2;`
     */
    public var result: GameResult
      @JvmName("getResult")
      get() = _builder.getResult()
      @JvmName("setResult")
      set(value) {
        _builder.setResult(value)
      }
    /**
     * `.GameResult result = 2;`
     */
    public fun clearResult() {
      _builder.clearResult()
    }
    /**
     * `.GameResult result = 2;`
     * @return Whether the result field is set.
     */
    public fun hasResult(): kotlin.Boolean {
      return _builder.hasResult()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun GameEvent.copy(block: GameEventKt.Dsl.() -> kotlin.Unit): GameEvent =
  GameEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val GameEventOrBuilder.moveOrNull: Move?
  get() = if (hasMove()) getMove() else null

public val GameEventOrBuilder.resultOrNull: GameResult?
  get() = if (hasResult()) getResult() else null

